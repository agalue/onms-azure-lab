#cloud-config
package_upgrade: false

yum_repos:
  docker:
    name: Docker CE Stable - $basearch
    baseurl: https://download.docker.com/linux/centos/$releasever/$basearch/stable
    enabled: true
    gpgcheck: true
    gpgkey: https://download.docker.com/linux/centos/gpg

write_files:
- owner: root:root
  path: /etc/security/limits.d/kafka.conf
  content: |
    * soft nofile 100000
    * hard nofile 100000

- owner: root:root
  path: /etc/sysctl.d/99-kafka.conf
  content: |
    net.ipv4.tcp_keepalive_time=60
    net.ipv4.tcp_keepalive_probes=3
    net.ipv4.tcp_keepalive_intvl=10
    net.core.rmem_max=16777216
    net.core.wmem_max=16777216
    net.core.rmem_default=16777216
    net.core.wmem_default=16777216
    net.core.optmem_max=40960
    net.ipv4.tcp_rmem=4096 87380 16777216
    net.ipv4.tcp_wmem=4096 65536 16777216
    net.ipv4.tcp_window_scaling=1
    net.core.netdev_max_backlog=2500
    net.core.somaxconn=65000
    vm.swappiness=1
    vm.zone_reclaim_mode=0
    vm.max_map_count=1048575

- owner: root:root
  permissions: '0400'
  path: /etc/snmp/snmpd.conf
  content: |
    rocommunity public default
    syslocation Azure - ${location}
    syscontact ${user}
    dontLogTCPWrappersConnects yes
    disk /

- owner: root:root
  path: /etc/systemd/system/zookeeper.service
  content: |
    [Unit]
    Description=Apache Zookeeper server
    Documentation=http://zookeeper.apache.org
    Wants=network-online.target
    After=network-online.target
    [Service]
    Type=simple
    User=root
    Group=root
    Environment="KAFKA_HEAP_OPTS=-Xmx${zk_heap_size}m -Xms${zk_heap_size}m"
    ExecStart=/opt/kafka/bin/zookeeper-server-start.sh /opt/kafka/config/zookeeper.properties
    ExecStop=/opt/kafka/bin/zookeeper-server-stop.sh
    [Install]
    WantedBy=multi-user.target

- owner: root:root
  path: /etc/systemd/system/kafka.service
  content: |
    [Unit]
    Description=Apache Kafka Server
    Documentation=http://kafka.apache.org
    Wants=zookeeper.service
    After=zookeeper.service network-online.target
    [Service]
    Type=simple
    User=root
    Group=root
    LimitNOFILE=100000
    Environment="KAFKA_HEAP_OPTS=-Xmx${kafka_heap_size}m -Xms${kafka_heap_size}m"
    Environment="KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.rmi.port=9999 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=%H -Djava.net.preferIPv4Stack=true"
    Environment="JMX_PORT=9999"
    ExecStart=/opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties
    ExecStop=/opt/kafka/bin/kafka-server-stop.sh
    [Install]
    WantedBy=multi-user.target

- owner: root:root
  path: /tmp/zookeeper.properties
  content: |
    dataDir=/data/zookeeper
    tickTime=2000
    clientPort=2181
    initLimit=10
    syncLimit=5

- owner: root:root
  path: /tmp/server.properties
  content: |
    broker.id=1
    log.dirs=/data/kafka
    log.retention.hours=168
    log.segment.bytes=1073741824
    zookeeper.connect=127.0.0.1:2181
    zookeeper.connection.timeout.ms=30000
    # Connection
    advertised.listeners=INSIDE://:9092,OUTSIDE://${public_fqdn}:9094
    listeners=INSIDE://:9092,OUTSIDE://:9094
    listener.security.protocol.map=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
    inter.broker.listener.name=INSIDE
    # Replication
    offsets.topic.replication.factor=1
    default.replication.factor=1
    min.insync.replicas=1
    # Must be greater than number of Minions per Location
    num.partitions=${kafka_partitions}
    # Recommended for the OpenNMS Kafka Producer
    message.max.bytes=5000000
    replica.fetch.max.bytes=5000000
    compression.type=producer
    # Required for OpenNMS and Minions
    auto.create.topics.enable=true
    # Recommended to avoid disrupting messages workflow
    delete.topic.enable=false

- owner: root:root
  permissions: '0755'
  path: /tmp/enable-authentication.sh
  content: |
    #!/bin/bash
    function wait_for {
      echo "Waiting for $1:$2 ."
      until echo -n >/dev/tcp/$1/$2 2>/dev/null; do
        printf '.'
        sleep 5
      done
      echo "done"
    }
    if [ "${security_enabled}" != "true" ]; then
      echo "Security is not enabled"
      exit
    fi
    wait_for $(hostname) 9092
    /opt/kafka/bin/kafka-configs.sh --bootstrap-server $(hostname):9092 \
      --alter \
      --add-config "SCRAM-SHA-256=[password=${kafka_passwd}],SCRAM-SHA-512=[password=${kafka_passwd}]" \
      --entity-type users \
      --entity-name ${kafka_user}
    cat <<EOF | sudo tee -a /opt/kafka/config/zookeeper.properties
      authProvider.sasl=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
    EOF
    sudo sed -i -r '/listener.security.protocol.map/d' /opt/kafka/config/server.properties
    cat <<EOF | sudo tee -a /opt/kafka/config/server.properties
    # Enable Security
    listener.security.protocol.map=INSIDE:SASL_PLAINTEXT,OUTSIDE:SASL_PLAINTEXT
    sasl.mechanism.inter.broker.protocol=SCRAM-SHA-512
    sasl.enabled.mechanisms=SCRAM-SHA-256,SCRAM-SHA-512
    EOF
    cat <<EOF | sudo tee /opt/kafka/config/zookeeper_jaas.conf
    Server {
      org.apache.zookeeper.server.auth.DigestLoginModule required
      user_${zk_user}="${zk_passwd}";
    };
    EOF
    sudo chmod 0600 /opt/kafka/config/zookeeper_jaas.conf
    cat <<EOF | sudo tee /opt/kafka/config/kafka_jaas.conf
    KafkaServer {
      org.apache.kafka.common.security.scram.ScramLoginModule required
      username="${kafka_user}"
      password="${kafka_passwd}";
    };
    Client {
      org.apache.zookeeper.server.auth.DigestLoginModule required
      username="${zk_user}"
      password="${zk_passwd}";
    };
    EOF
    sudo chmod 0600 /opt/kafka/config/kafka_jaas.conf
    OPTS='Environment="KAFKA_OPTS=-Djava.security.auth.login.config=/opt/kafka/config/zookeeper_jaas.conf"'
    sudo sed -i -r -e "/^ExecStart=.*/i $OPTS" /etc/systemd/system/zookeeper.service
    OPTS='Environment="KAFKA_OPTS=-Djava.security.auth.login.config=/opt/kafka/config/kafka_jaas.conf"'
    sudo sed -i -r -e "/^ExecStart=.*/i $OPTS" /etc/systemd/system/kafka.service
    sudo systemctl daemon-reload
    sudo systemctl restart zookeeper
    wait_for 127.0.0.1 2181
    sudo systemctl restart kafka
    wait_for $(hostname) 9092

- owner: root:root
  permissions: '0755'
  path: /tmp/enable-encryption.sh
  content: |
    #!/bin/bash
    if [ "${security_enabled}" != "true" ]; then
      echo "Security is not enabled"
      exit
    fi
    sudo dnf install -y certbot python3-certbot-nginx
    sudo certbot certonly --standalone -d ${public_fqdn} --non-interactive --agree-tos -m ${email}
    TEMP_P12="/tmp/ssl.p12.$(date +%s)"
    TEMP_KEYSTORE="/tmp/ssl.keystore.$(date +%s)"
    TARGET_KEYSTORE="/opt/kafka/config/letsencrypt.jks"
    sudo openssl pkcs12 -export \
      -in /etc/letsencrypt/live/${public_fqdn}/fullchain.pem \
      -inkey /etc/letsencrypt/live/${public_fqdn}/privkey.pem \
      -out $TEMP_P12 -name kafka -password "pass:${jks_passwd}"
    sudo keytool -importkeystore -alias kafka \
      -deststorepass "${jks_passwd}" -destkeypass "${jks_passwd}" -destkeystore $TEMP_KEYSTORE \
      -srckeystore $TEMP_P12 -srcstoretype PKCS12 -srcstorepass "${jks_passwd}"
    sudo cp $TEMP_KEYSTORE $TARGET_KEYSTORE
    sudo chmod 440 $TARGET_KEYSTORE
    sudo rm -f $TEMP_P12 $TEMP_KEYSTORE
    CONFIG="/opt/kafka/config/server.properties"
    sudo sed -i -r '/listener.security.protocol.map/d' $CONFIG
    cat <<EOF | sudo tee -a $CONFIG
    listener.security.protocol.map=INSIDE:SASL_PLAINTEXT,OUTSIDE:SASL_SSL
    ssl.keystore.location=$TARGET_KEYSTORE
    ssl.keystore.password=${jks_passwd}
    ssl.key.password=${jks_passwd}
    EOF
    sudo systemctl restart kafka

packages:
- net-snmp
- net-snmp-utils
- epel-release
- java-11-openjdk-devel
- docker-ce
- docker-ce-cli
- containerd.io

runcmd:
- sysctl --system
- wget -O /tmp/kafka.tar.gz https://downloads.apache.org/kafka/2.8.1/kafka_2.13-2.8.1.tgz
- cd /opt
- mkdir kafka
- tar -xvzf /tmp/kafka.tar.gz -C kafka --strip-components 1
- mv -f /tmp/*.properties /opt/kafka/config/
- mkdir -p /data/zookeeper /data/kafka
- echo 1 > /data/zookeeper/myid
- systemctl daemon-reload
- systemctl --now enable zookeeper
- systemctl --now enable kafka
- systemctl --now enable snmpd
- systemctl --now enable docker
- /tmp/enable-authentication.sh
- /tmp/enable-encryption.sh
- usermod -aG docker ${user}
- docker run --name cmak -d -e ZK_HOSTS="$(hostname):2181" -e KAFKA_MANAGER_AUTH_ENABLED="true" -e KAFKA_MANAGER_USERNAME="${cmak_user}" -e KAFKA_MANAGER_PASSWORD="${cmak_passwd}" -e APPLICATION_SECRET="${cmak_passwd}" -p 9000:9000 hlebalbau/kafka-manager:stable
